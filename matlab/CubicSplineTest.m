nIndex = 10;


                        fy1 = 10; fx1 = nIndex + 0; fx1_2 = fx1 * fx1; fx1_3 = fx1_2 * fx1;
                        fy2 = 12; fx2 = nIndex + 1; fx2_2 = fx2 * fx2; fx2_3 = fx2_2 * fx2;
                        fy3 = 9; fx3 = nIndex + 2; fx3_2 = fx3 * fx3; fx3_3 = fx3_2 * fx3;
                        fy4 = 13; fx4 = nIndex + 3; fx4_2 = fx4 * fx4; fx4_3 = fx4_2 * fx4;



                        f1 = fy1   * ((fx2_2 * fx3       + fx3_2 * fx4       + fx4_2 * fx2      ) - (fx2_2 * fx4       + fx3_2 * fx2       + fx4_2 * fx3      )) ...
                           - fy2   * ((fx1_2 * fx3       + fx3_2 * fx4       + fx4_2 * fx1      ) - (fx1_2 * fx4       + fx3_2 * fx1       + fx4_2 * fx3      )) ...
                           + fy3   * ((fx1_2 * fx2       + fx2_2 * fx4       + fx4_2 * fx1      ) - (fx1_2 * fx4       + fx2_2 * fx1       + fx4_2 * fx2      )) ...
                           - fy4   * ((fx1_2 * fx2       + fx3_2 * fx1       + fx2_2 * fx3      ) - (fx1_2 * fx3       + fx2_2 * fx1       + fx3_2 * fx2      ));

                        f2 = fx1_3 * ((fy2   * fx3       + fy3   * fx4       + fy4   * fx2      ) - (fy2   * fx4       + fy3   * fx2       + fy4   * fx3      )) ...
                           - fx2_3 * ((fy1   * fx3       + fy3   * fx4       + fy4   * fx1      ) - (fy1   * fx4       + fy3   * fx1       + fy4   * fx3      )) ...
                           + fx3_3 * ((fy1   * fx2       + fy2   * fx4       + fy4   * fx1      ) - (fy1   * fx4       + fy2   * fx1       + fy4   * fx2      )) ...
                           - fx4_3 * ((fy1   * fx2       + fy3   * fx1       + fy2   * fx3      ) - (fy1   * fx3       + fy2   * fx1       + fy3   * fx2      ));

                        f3 = fx1_3 * ((fx2_2 * fy3       + fx3_2 * fy4       + fx4_2 * fy2      ) - (fx2_2 * fy4       + fx3_2 * fy2       + fx4_2 * fy3      )) ...
                           - fx2_3 * ((fx1_2 * fy3       + fx3_2 * fy4       + fx4_2 * fy1      ) - (fx1_2 * fy4       + fx3_2 * fy1       + fx4_2 * fy3      )) ...
                           + fx3_3 * ((fx1_2 * fy2       + fx2_2 * fy4       + fx4_2 * fy1      ) - (fx1_2 * fy4       + fx2_2 * fy1       + fx4_2 * fy2      )) ...
                           - fx4_3 * ((fx1_2 * fy2       + fx3_2 * fy1       + fx2_2 * fy3      ) - (fx1_2 * fy3       + fx2_2 * fy1       + fx3_2 * fy2      ));

                        f4 = fx1_3 * ((fx2_2 * fx3 * fy4 + fx3_2 * fx4 * fy2 + fx4_2 * fx2 * fy3) - (fx2_2 * fx4 * fy3 + fx3_2 * fx2 * fy4 + fx4_2 * fx3 * fy2)) ...
                           - fx2_3 * ((fx1_2 * fx3 * fy4 + fx3_2 * fx4 * fy1 + fx4_2 * fx1 * fy3) - (fx1_2 * fx4 * fy3 + fx3_2 * fx1 * fy4 + fx4_2 * fx3 * fy1)) ...
                           + fx3_3 * ((fx1_2 * fx2 * fy4 + fx2_2 * fx4 * fy1 + fx4_2 * fx1 * fy2) - (fx1_2 * fx4 * fy2 + fx2_2 * fx1 * fy4 + fx4_2 * fx2 * fy1)) ...
                           - fx4_3 * ((fx1_2 * fx2 * fy3 + fx3_2 * fx1 * fy2 + fx2_2 * fx3 * fy1) - (fx1_2 * fx3 * fy2 + fx2_2 * fx1 * fy3 + fx3_2 * fx2 * fy1));

                        f0 = fx1_3 * ((fx2_2 * fx3       + fx3_2 * fx4       + fx4_2 * fx2      ) - (fx2_2 * fx4       + fx3_2 * fx2       + fx4_2 * fx3      )) ...
                           - fx2_3 * ((fx1_2 * fx3       + fx3_2 * fx4       + fx4_2 * fx1      ) - (fx1_2 * fx4       + fx3_2 * fx1       + fx4_2 * fx3      )) ...
                           + fx3_3 * ((fx1_2 * fx2       + fx2_2 * fx4       + fx4_2 * fx1      ) - (fx1_2 * fx4       + fx2_2 * fx1       + fx4_2 * fx2      )) ...
                           - fx4_3 * ((fx1_2 * fx2       + fx3_2 * fx1       + fx2_2 * fx3      ) - (fx1_2 * fx3       + fx2_2 * fx1       + fx3_2 * fx2      ));

                           nPoint = 12;
                                                   fTest = (((f1 * nPoint + f2) * nPoint + f3) * nPoint + f4) / f0;

                                                   